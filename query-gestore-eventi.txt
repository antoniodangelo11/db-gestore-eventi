1 - Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)
1 - SELECT * FROM events WHERE price IS NULL 

2 - Selezionare tutte le location in ordine alfabetico (82)
2 - SELECT * FROM locations l ORDER BY name 

3 - Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)
3 - SELECT * FROM events e WHERE price < 20 AND duration < '03:00:00'

4 - Selezionare tutti gli eventi di dicembre 2023 (25)
4 - SELECT * FROM events WHERE `start` > '2023-12-01' ORDER BY `start`

5 - Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)
5 - SELECT * FROM events WHERE duration > '03:00:00' ORDER BY duration

6 - Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)
6 - SELECT name, start, duration, end_of_sale  FROM events

7 - Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)
7 - SELECT * FROM events e WHERE user_id = 1202

8 - Selezionare il numero totale di eventi per ogni fascia di prezzo (81)
8 - SELECT price FROM events GROUP BY price 

9 - Selezionare tutti gli utenti admin ed editor (9)
9 - SELECT * FROM users WHERE users.role_id = 1 OR users.role_id  = 2

10 - Selezionare tutti i concerti (eventi con il tag “concerti”) (72)
10 - SELECT * FROM events JOIN event_tag ON events.id = event_tag.event_id WHERE tag_id = 1

11 - Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)
11 - SELECT avg(events.price), tags.name FROM events JOIN event_tag ON events.id = event_tag.event_id
JOIN tags ON tags.id = event_tag.tag_id GROUP BY tags.name 

12 - Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)
12 - SELECT locations.name, COUNT('numero eventi') FROM `events` JOIN locations ON locations.id = events.location_id GROUP BY locations.name;

13 - Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)
13 - SELECT events.name, users.first_name, users.last_name FROM events JOIN bookings ON events.id = bookings.event_id JOIN users ON bookings.user_id = users.id WHERE events.id = 34;

14 - Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)
14 - SELECT events.name, users.first_name, users.last_name FROM events JOIN bookings ON events.id = bookings.event_id JOIN users ON bookings.user_id = users.id WHERE events.id = 2;

15 - Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)
15 - SELECT events.name, bookings.id FROM events JOIN bookings on events.id = bookings.event_id WHERE events.total_tickets = bookings.user_id;

16 - Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)
16 - SELECT locations.id, COUNT('number of events') FROM `locations` JOIN events ON events.location_id = locations.id GROUP BY locations.id ORDER BY COUNT('number of events');

17 - Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)
17 - SELECT users.first_name, users.last_name, COUNT('numero di prenotazioni') FROM `bookings` JOIN users ON user_id = users.id GROUP BY bookings.user_id HAVING COUNT('numero di prenotazioni') > 70;

18 - Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)

